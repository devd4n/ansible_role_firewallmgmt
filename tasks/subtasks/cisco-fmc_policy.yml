---
# REQUIRED: pip install urllib3

#- name: Include needed variables
#  include_vars: cisco-fmc_policy.yml

#- name: Schreibe die Variable um, wenn eine Bedingung erf√ºllt ist
#  set_fact:
#    my_variable: "new_value"
#  when: my_variable == "old_value"

- name: Get Domain
  cisco.fmcansible.fmc_configuration:
    operation: getAllDomain
    register_as: domain

# this have to be looped trough all srczones
# and create an objects array for source zones 
# and the same should be done for dstzones
# and srcaddr
# and dstaddr
# and so on ...
- name: Get Security Zone Object
  cisco.fmcansible.fmc_configuration:
   operation: "getAllSecurityZoneObject"
   path_params:
       domainUUID: "{{ domain[0].uuid }}"
   filters:
     name: 'External'
   register_as: seczone

- name: Show the seczone
  debug:
    msg: "seczone: {{ seczone }}"

- name: Get Access Policy
  cisco.fmcansible.fmc_configuration:
    operation: getAllAccessPolicy
    path_params:
      domainUUID: '{{ domain[0].uuid }}'
    filters:
      name: '{{ item_policy.polname }}'
    register_as: accesspolicy

- name: Create an access rule allowing trafic from Cisco DevNet
  cisco.fmcansible.fmc_configuration:
    operation: upsertAccessRule
    data:
      name: item_policy.name
      type: accessrule
      action: ALLOW # ALLOW | TRUST | BLOCK | MONITOR | BLOCK_RESET | BLOCK_INTERACTIVE | BLOCK_RESET_INTERACTIVE
      #sendEventsToFMC : true
      sourceZones: 
        objects: 
          - id: "{{ seczone[0].id }}"
            name: "{{ seczone[0].name }}"
            type: "SecurityZone"
      commentHistoryList : 
        - date: 0
          comment: "unkown comment"
    path_params:
      containerUUID: '{{ accesspolicy[0].id }}'
      domainUUID: '{{ domain[0].uuid }}'


#  "sourceZones": {
#    "objects": [
#      {
#        "name": "External",
#        "id": "SecurityZoneUUID",
#        "type": "SecurityZone"
#      }
#    ]
#  },
#  "destinationZones": {
#    "objects": [
#      {
#        "name": "Internal",
#        "id": "SecurityZoneUUID",
#        "type": "SecurityZone"
#      }
#    ]
#  },


#"newComments": [
#    "comment1",
#    "comment2"
#  ]

#{
#  "action": "ALLOW",
#  "enabled": true,
#  "type": "AccessRule",
#  "name": "Rule1",
#  "sendEventsToFMC": false,
#  "logFiles": false,
#  "logBegin": false,
#  "logEnd": false,
#  "variableSet": {
#    "name": "Default Set",
#    "id": "VariableSetUUID",
#    "type": "VariableSet"
#  },
#  "vlanTags": {
#    "objects": [
#      {
#        "type": "VlanTag",
#        "name": "vlan_tag_1",
#        "id": "VlanTagUUID1"
#      },
#      {
#        "type": "VlanTag",
#        "name": "vlan_tag_2",
#        "id": "VlanTagUUID2"
#      }
#    ]
#  },
#  "urls": {
#    "urlCategoriesWithReputation": [
#      {
#        "type": "UrlCategoryAndReputation",
#        "category": {
#          "name": "Weapons",
#          "id": "URLCategoryUUID",
#          "type": "URLCategory"
#        },
#        "reputation": "BENIGN_SITES_WITH_SECURITY_RISKS"
#      }
#    ]
#  },

#  "sourcePorts": {
#    "objects": [
#      {
#        "type": "ProtocolPortObject",
#        "name": "AOL",
#        "id": "ProtocolPortObjectUUID"
#      }
#    ]
#  },
#  "sourceDynamicObjects": {
#    "objects": [
#      {
#        "name": "SourceDynamicObject",
#        "id": "dynamicObjectUUID",
#        "type": "DynamicObject"
#      }
#    ]
#  },
#  "destinationDynamicObjects": {
#    "objects": [
#      {
#        "name": "destinationDynamicObject",
#        "id": "dynamicObjectUUID",
#        "type": "DynamicObject"
#      }
#    ]
#  },
#  "destinationPorts": {
#    "objects": [
#      {
#        "type": "ProtocolPortObject",
#        "name": "Bittorrent",
#        "id": "ProtocolPortObjectUUID"
#      }
#    ]
#  },
#  "ipsPolicy": {
#    "type": "IntrusionPolicy",
#    "id": "ipsPolicyUuid",
#    "name": "ipsPlicyName"
#  },
#  "filePolicy": {
#    "type": "FilePolicy",
#    "id": "filePolicyUuid",
#    "name": "filePolicyName"
#  },
#  "snmpConfig": {
#    "id": "snmpConfigUuid",
#    "name": "snmp_alert1",
#    "type": "SNMPAlert"
#  },
#  "syslogConfig": {
#    "id": "syslogConfigUuid",
#    "name": "syslog_alert1",
#    "type": "SyslogAlert"
#  },
#  "newComments": [
#    "comment1",
#    "comment2"
#  ]
#}